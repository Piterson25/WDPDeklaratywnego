#lang scheme

;(define (make-konto balance password)
;  (define (withdraw amount pass)
;    (if (eq? pass password)
;        (if (>= balance amount)
;            (set! balance (- balance amount))
;            "Nie wystarczające środki.")
;        "Nie prawidłowe hasło"))
;  (define (deposit amount)
;    (set! balance (+ balance amount)))
;  (define (check-balance)
;    balance)
;  (lambda (operation . args)
;    (cond ((eq? operation 'withdraw) (lambda (amount) (withdraw amount)))
;          ((eq? operation 'deposit) (lambda (amount) (deposit amount)))
;          ((eq? operation 'balance) (lambda () (check-balance)))
;          (else "Nieprawidłowa operacja."))))
;
;(define k1 (make-konto 100))
;((k1 'withdraw) 40)
;((k1 'balance))
;((k1 'deposit) 10)
;;((k1 'balance))

(define (make-konto balance password)
  (define (withdraw amount pass)
    (if (eq? pass password)
        (if (>= balance amount)
            (set! balance (- balance amount))
            "not sufficient funds")
        "incorrect password"))
  (define (deposit amount)
    (set! balance (+ balance amount)))
  (define (check-balance)
    balance)
  (lambda (operation . args)
    (cond ((eq? operation 'password) (lambda (amount) (withdraw amount "Scheme") (check-balance)))
          ((eq? operation 'wrong-password) (lambda (amount) (withdraw amount "Not Scheme")))
          ((eq? operation 'deposit) (lambda (amount) (deposit amount)))
          ((eq? operation 'balance) (lambda () (check-balance)))
          (else "unrecognized command"))))

(define k2 (make-konto 100 "Scheme"))
((k2 'password 'withdraw) 40)
((k2 'wrong-password 'withdraw) 20)
